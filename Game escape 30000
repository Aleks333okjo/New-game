mport time
import pygame
import random

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pygame
pygame.init()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∂–æ–π—Å—Ç–∏–∫–∞
pygame.joystick.init()
joystick_count = pygame.joystick.get_count()
joystick = None
if joystick_count > 0:
    joystick = pygame.joystick.Joystick(0)
    joystick.init()

class Game:
    def init(self):
        self.difficulty = ""
        self.player_health = 0
        self.killer_speed = 0
        self.killer_sensitivity = 0
        self.killer_proximity = 0.0
        self.is_alive = True
        self.items_found = []
        self.clues_found = []
        self.escape_attempted = False
        self.escape_items = {
            "–∫–ª—é—á_–æ—Ç_–º–∞—à–∏–Ω—ã": {"–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å": 0.3, "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω": False},
            "–∫–ª—é—á_–æ—Ç_–ª–æ–¥–∫–∏": {"–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å": 0.2, "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω": False},
            "—Å–∏–≥–Ω–∞–ª—å–Ω—ã–π_–ø–∏—Å—Ç–æ–ª–µ—Ç": {"–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å": 0.4, "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω": False},
            "–ª–æ–º": {"–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å": 0.5, "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω": False},
            "—Ä–∞—Ü–∏—è": {"–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å": 0.25, "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω": False}
        }

    def set_difficulty_parameters(self):
        difficulties = {
            "–õ–µ–≥–∫–æ": (7, 1, 0.3),
            "–°—Ä–µ–¥–Ω–µ": (5, 2, 0.5),
            "–¢—è–∂–µ–ª–æ": (3, 3, 0.7),
            "–≠–∫—Å—Ç—Ä–∏–º": (1, 4, 0.9),
            "–°—É–ø–µ—Ä—Ç—è–∂–µ–ª–æ": (1, 5, 1.0)
        }
        self.player_health, self.killer_speed, self.killer_sensitivity = difficulties.get(
            self.difficulty, (7, 1, 0.3)
        )

    def start(self):
        print("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ '–ó–∞–±—Ä–æ—à–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥'!")
        time.sleep(1)
        print("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:")
        difficulties = ["–õ–µ–≥–∫–æ", "–°—Ä–µ–¥–Ω–µ", "–¢—è–∂–µ–ª–æ", "–≠–∫—Å—Ç—Ä–∏–º", "–°—É–ø–µ—Ä—Ç—è–∂–µ–ª–æ"]
        for i, d in enumerate(difficulties, 1):
            print(f"{i}. {d}")

        choice = input("–í–∞—à –≤—ã–±–æ—Ä: ")
        try:
            self.difficulty = difficulties[int(choice)-1]
        except (ValueError, IndexError):
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º '–õ–µ–≥–∫–æ'.")
            self.difficulty = "–õ–µ–≥–∫–æ"

        self.set_difficulty_parameters()
        print(f"\n–†–µ–∂–∏–º: {self.difficulty}")
        print(f"–ñ–∏–∑–Ω–∏: {self.player_health}")
        print(f"–°–∫–æ—Ä–æ—Å—Ç—å —É–±–∏–π—Ü—ã: {self.killer_speed}")
        print(f"–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ —à—É–º—É: {self.killer_sensitivity}")
        time.sleep(2)
        print("\n–í—ã - –î–∂–µ–∫, —á–∞—Å—Ç–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç —Å–≤–æ—é –ø—Ä–æ–ø–∞–≤—à—É—é —Å–µ—Å—Ç—Ä—É...")
        time.sleep(2)
        self.explore()

    def explore(self):
        while self.is_alive:
            self.random_event()
            self.killer_proximity += 0.1 * self.killer_speed
            
            if self.check_death():
                break

            print("\n–í—ã –Ω–∞ –ø—É—Å—Ç—ã–Ω–Ω–æ–π —É–ª–∏—Ü–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
            print("1. –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–¥–∞–Ω–∏–µ")
            print("2. –°–ø—Ä—è—Ç–∞—Ç—å—Å—è")
            print("3. –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å")
            print("4. –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å–±–µ–∂–∞—Ç—å")
            print("5. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∂–æ–π—Å—Ç–∏–∫")

            if joystick:
                for event in pygame.event.get():
                    if event.type == pygame.JOYAXISMOTION:
                        self.handle_movement(event)

            choice = input("–í–∞—à –≤—ã–±–æ—Ä: ")

            if choice == '1':
                self.find_item()
            elif choice == '2':
                self.hide()
            elif choice == '3':
                self.check_inventory()
            elif choice == '4':
                self.attempt_escape()
            elif choice == '5':
                print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∂–æ–π—Å—Ç–∏–∫ –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è")
            else:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")

    def handle_movement(self, event):
        axes = {
            0: ("–≤–ª–µ–≤–æ", "–≤–ø—Ä–∞–≤–æ"),
            1: ("–≤–ø–µ—Ä–µ–¥", "–Ω–∞–∑–∞–¥"),
            2: ("–ø–µ—Ä–µ–∫–∞—Ç –≤–ª–µ–≤–æ", "–ø–µ—Ä–µ–∫–∞—Ç –≤–ø—Ä–∞–≤–æ"),
            3: ("–ø—Ä—ã–∂–æ–∫", ""),
            4: ("–ø—Ä—ã–∂–æ–∫ –≤–Ω–∏–∑", "")
        }
        
        if event.axis in axes:
            direction = axes[event.axis]
            if event.value < -0.5:
                print(f"–î–∂–µ–∫ –¥–≤–∏–∂–µ—Ç—Å—è {direction[0]}")
            elif event.value > 0.5:
                if direction[1]: print(f"–î–∂–µ–∫ –¥–≤–∏–∂–µ—Ç—Å—è {direction[1]}")
def find_item(self):
        found = False
        for item, params in self.escape_items.items():
            if random.random() < params["–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å"] and item not in self.items_found:
                self.items_found.append(item)
                print(f"\n–í—ã –Ω–∞—à–ª–∏ {item.replace('_', ' ')}!")
                found = True
                break
        if not found:
            print("\n–ó–¥–µ—Å—å –Ω–∏—á–µ–≥–æ –ø–æ–ª–µ–∑–Ω–æ–≥–æ...")

def hide(self):
        print("\n–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å —Å–ø—Ä—è—Ç–∞—Ç—å—Å—è...")
        if random.random() < 0.6 - self.killer_sensitivity:
            print("–£–¥–∞–ª–æ—Å—å —Å–ø—Ä—è—Ç–∞—Ç—å—Å—è! –£–±–∏–π—Ü–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç –º–∏–º–æ.")
            self.killer_proximity = max(0, self.killer_proximity - 1)
        else:
            print("–£–±–∏–π—Ü–∞ –∑–∞–º–µ—Ç–∏–ª –≤–∞—Å!")
            self.player_health -= 1

def check_inventory(self):
        print("\n--- –ò–ù–í–ï–ù–¢–ê–†–¨ ---")
        for item in self.items_found:
            status = " (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω)" if self.escape_items[item]["–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"] else ""
            print(f"- {item.replace('_', ' ').capitalize()}{status}")
        print(f"\n–ó–¥–æ—Ä–æ–≤—å–µ: {'‚ù§Ô∏è' * self.player_health}")
        print(f"–ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ —É–±–∏–π—Ü—ã: {'‚ñÆ' * int(self.killer_proximity)}")

def attempt_escape(self):
        print("\n–°–ø–æ—Å–æ–±—ã –ø–æ–±–µ–≥–∞:")
        options = [
            ("–ú–∞—à–∏–Ω–∞", "–∫–ª—é—á_–æ—Ç_–º–∞—à–∏–Ω—ã"),
            ("–õ–æ–¥–∫–∞", "–∫–ª—é—á_–æ—Ç_–ª–æ–¥–∫–∏"),
            ("–°–∏–≥–Ω–∞–ª", "—Å–∏–≥–Ω–∞–ª—å–Ω—ã–π_–ø–∏—Å—Ç–æ–ª–µ—Ç"),
            ("–í–∑–ª–æ–º", "–ª–æ–º"),
            ("–í—ã–∑–æ–≤ –ø–æ–º–æ—â–∏", "—Ä–∞—Ü–∏—è")
        ]
        
        for i, (desc, item) in enumerate(options, 1):
            print(f"{i}. {desc} {'‚úÖ' if item in self.items_found else '‚ùå'}")

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±: ")
        try:
            selected = options[int(choice)-1]
            if selected[1] in self.items_found:
                self.execute_escape(selected[1])
            else:
                print("–ù—É–∂–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ!")
        except (ValueError, IndexError):
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
def execute_escape(self, item):
        success_chance = {
            "–∫–ª—é—á_–æ—Ç_–º–∞—à–∏–Ω—ã": 0.7,
            "–∫–ª—é—á_–æ—Ç_–ª–æ–¥–∫–∏": 0.6,
            "—Å–∏–≥–Ω–∞–ª—å–Ω—ã–π_–ø–∏—Å—Ç–æ–ª–µ—Ç": 0.8,
            "–ª–æ–º": 0.4,
            "—Ä–∞—Ü–∏—è": 0.5
        }[item] - (self.killer_sensitivity * 0.2)

        if random.random() < success_chance:
            print("\n–£–°–ü–ï–•! –í—ã —Å–±–µ–∂–∞–ª–∏!")
            self.escape_attempted = True
            self.is_alive = False
        else:
            print("\n–ü—Ä–æ–≤–∞–ª! –£–±–∏–π—Ü–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è!")
            self.player_health -= 2
            self.escape_items[item]["–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"] = True

def random_event(self):
        events = [
            (0.3, "–°–ª—ã—à–µ–Ω —Å—Ç—Ä–∞–Ω–Ω—ã–π —Å–∫—Ä–µ–∂–µ—Ç –º–µ—Ç–∞–ª–ª–∞...", self.increase_killer_proximity),
            (0.2, "–í–µ—Ç–µ—Ä –∑–∞—Ö–ª–æ–ø—ã–≤–∞–µ—Ç –¥–≤–µ—Ä—å!", self.make_noise),
            (0.1, "–ù–∞–π–¥–µ–Ω —Ç—Ä—É–ø —Å –∑–∞–ø–∏—Å–∫–æ–π!", self.add_clue)
        ]
        
        for prob, msg, effect in events:
            if random.random() < prob:
                print(f"\n–°–û–ë–´–¢–ò–ï: {msg}")
                effect()
                break

def increase_killer_proximity(self):
        self.killer_proximity += 0.3   

def make_noise(self):
        if random.random() < self.killer_sensitivity:
            print("–£–±–∏–π—Ü–∞ —É—Å–ª—ã—à–∞–ª —à—É–º!")
            self.killer_proximity += 0.5
def add_clue(self):
        clues = [
            "–û—Å—Ç–µ—Ä–µ–≥–∞–π—Ç–µ—Å—å –≤–æ–¥—ã...",
            "–û–Ω –Ω–µ–Ω–∞–≤–∏–¥–∏—Ç —Å–≤–µ—Ç...",
            "–ö–ª—é—á –æ—Ç —Ü–µ—Ä–∫–≤–∏...",
            "–ù–µ –¥–æ–≤–µ—Ä—è–π—Ç–µ —Ç–µ–Ω—è–º..."
        ]
        new_clue = random.choice(clues)
        if new_clue not in self.clues_found:
            self.clues_found.append(new_clue)
            print(f"–ü–æ–¥—Å–∫–∞–∑–∫–∞: {new_clue}")

def check_death(self):
        death_conditions = [
            (self.player_health <= 0, "–í—ã –∏—Å—Ç–µ–∫–ª–∏ –∫—Ä–æ–≤—å—é..."),
            (random.random() < self.killer_sensitivity / 2, "–£–±–∏–π—Ü–∞ –ø–æ—á—É—è–ª –≤–∞—à —Å—Ç—Ä–∞—Ö!"),

(len(self.items_found) > 3 and not self.escape_attempted, "–í—ã —Å–ø–æ—Ç–∫–Ω—É–ª–∏—Å—å –ø–æ–¥ —Ç—è–∂–µ—Å—Ç—å—é –≤–µ—â–µ–π!")
        ]
        
        for condition, message in death_conditions:
            if condition:
                print(f"\nüíÄ –°–ú–ï–†–¢–¨: {message}")
                self.is_alive = False
                return True
        return False

if Game == "main":
    game = Game()
    game.start()
    print("\n–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!")
